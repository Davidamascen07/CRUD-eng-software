# 🆓 Tutorial: Deploy Gratuito na AWS Free Tier

## ✅ Pré-requisitos OBRIGATÓRIOS

### 1. Conta AWS Free Tier
- Criar conta em: https://aws.amazon.com/free/
- ⚠️ **IMPORTANTE**: Inserir cartão de crédito (não será cobrado se ficar dentro dos limites)
- Verificar que está na região **us-east-2 (Ohio)**

### 2. Configurar AWS CLI
```bash
# Instalar AWS CLI
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

# Configurar credenciais
aws configure
```
**Você precisará:**
- AWS Access Key ID
- AWS Secret Access Key  
- Region: `us-east-2` ⚠️ **IMPORTANTE: MUDOU DE us-east-1 para us-east-2**
- Output format: `json`

### 3. Instalar Terraform
```bash
# Ubuntu/Debian
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update && sudo apt-get install terraform

# Verificar instalação
terraform --version
```

### 4. Criar Key Pair na AWS

**OPÇÃO 1: Via AWS Console (MAIS FÁCIL no Windows)**
```
1. Acesse: https://console.aws.amazon.com/ec2/
2. No menu lateral: Network & Security > Key Pairs
3. Clique em "Create key pair"
4. Nome: crud-app-key
5. Key pair type: RSA
6. Private key file format: .pem
7. Clique "Create key pair"
8. O arquivo crud-app-key.pem será baixado automaticamente
9. Mova o arquivo para: C:\Users\SEU_USUARIO\.ssh\crud-app-key.pem
```

**OPÇÃO 2: Via AWS CLI (Windows)**
```cmd
# Criar diretório .ssh se não existir
mkdir "%USERPROFILE%\.ssh" 2>nul

# Criar key pair e salvar
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text > "%USERPROFILE%\.ssh\crud-app-key.pem"

# No Windows, não precisa do chmod (permissões são diferentes)
# Verificar se foi criado
dir "%USERPROFILE%\.ssh\crud-app-key.pem"
```

**OPÇÃO 3: Via PowerShell (Recomendado)**
```powershell
# Criar diretório .ssh
New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.ssh"

# Criar key pair
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text | Out-File -FilePath "$env:USERPROFILE\.ssh\crud-app-key.pem" -Encoding ASCII

# Verificar criação
Get-Item "$env:USERPROFILE\.ssh\crud-app-key.pem"
```

**TESTE SE FUNCIONOU:**
```cmd
# Verificar se o arquivo existe
dir "%USERPROFILE%\.ssh\crud-app-key.pem"

# Verificar se o key pair existe na AWS
aws ec2 describe-key-pairs --key-names crud-app-key
```

## 🚀 Deploy Passo a Passo

### 1. Preparar o Terraform
```cmd
cd "c:\projeto\ap3 ng de soft\CRUD-eng-software\terraform"

# Inicializar Terraform
terraform init

# Verificar configuração (deve passar sem erros)
terraform validate

# Se der erro, verificar:
# 1. Sintaxe dos arquivos .tf
# 2. Referências a recursos inexistentes
# 3. Variáveis não declaradas
```

**SE DER ERRO de "Invalid reference":**
```cmd
# O problema está no JavaScript dentro do user_data
# Verificar se as aspas estão corretas
# Verificar se os template literals (backticks) estão escapados
```

**SE DER ERRO de "Reference to undeclared resource":**
```cmd
# Verificar se todos os outputs fazem referência a recursos que existem
# Remover outputs de recursos que foram removidos (como RDS)
```

### 2. Verificar o Plano (IMPORTANTE!)
```bash
# Ver o que será criado
terraform plan

# Verificar se aparece:
# ✅ 1 VPC
# ✅ 2-3 Subnets  
# ✅ 1 Internet Gateway
# ✅ 1 Security Group
# ✅ 1 EC2 t2.micro
# ✅ 1 Elastic IP
# ❌ NENHUM RDS (custa dinheiro!)
```

### 3. Executar o Deploy
```bash
# Deploy na AWS
terraform apply

# Digite: yes
# Aguarde ~5-10 minutos
```

### 4. Verificar se Funcionou
Após o deploy, você verá:
```bash
Outputs:
application_url = "http://X.X.X.X:3001"
ec2_public_ip = "X.X.X.X"
free_tier_info = {
  instance_type = "t2.micro (Free Tier)"
  monthly_cost = "US$ 0.00"
}
```

### 5. Testar a Aplicação
```bash
# Teste 1: Health check
curl http://SEU_IP:3001/health

# Teste 2: API
curl http://SEU_IP:3001/api/items

# Teste 3: Navegador
# Abrir: http://SEU_IP:3001
```

## 💰 Monitoramento de Custos

### 1. Configurar Alertas de Billing
```bash
# Via AWS CLI
aws budgets create-budget --account-id SEU_ACCOUNT_ID --budget '{
  "BudgetName": "Free-Tier-Alert",
  "BudgetLimit": {
    "Amount": "1.00",
    "Unit": "USD"
  },
  "TimeUnit": "MONTHLY",
  "BudgetType": "COST"
}'
```

### 2. Verificar Uso Diariamente
- AWS Console > Billing > Free Tier
- Verificar: EC2 hours, EBS storage, Data transfer

### 3. Limites Free Tier
| Serviço | Limite Mensal | Status |
|---------|---------------|--------|
| EC2 t2.micro | 750 horas | ✅ Dentro |
| EBS Storage | 30 GB | ✅ 8 GB usado |
| Data Transfer | 1 GB | ✅ Baixo uso |
| Elastic IP | 1 grátis | ✅ 1 usado |

## 🛠️ Troubleshooting

### Problema: "InvalidKeyPair.NotFound: The key pair 'crud-app-key' does not exist"

**ESTE É O ERRO MAIS COMUM! Aqui está a solução:**

⚠️ **ATENÇÃO**: Se você criou a chave em `us-east-1` mas o Terraform usa `us-east-2`, precisa corrigir isso!

#### Solução RÁPIDA: Verificar e corrigir região

```cmd
# 1. VERIFICAR região atual do AWS CLI
aws configure get region

# 2. VERIFICAR onde a chave foi criada
aws ec2 describe-key-pairs --key-names crud-app-key --region us-east-1
aws ec2 describe-key-pairs --key-names crud-app-key --region us-east-2
```

#### Opção A: Usar us-east-1 (mudar Terraform)
```cmd
# Se a chave está em us-east-1, configurar AWS CLI para us-east-1:
aws configure set region us-east-1

# E editar o arquivo variables.tf para usar us-east-1:
# Alterar: default = "us-east-2" para default = "us-east-1"
# Alterar: default = "us-east-2a" para default = "us-east-1a"
```

#### Opção B: Usar us-east-2 (criar nova chave)
```cmd
# 1. Configurar AWS CLI para us-east-2
aws configure set region us-east-2

# 2. Criar nova chave em us-east-2
mkdir "%USERPROFILE%\.ssh" 2>nul
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text > "%USERPROFILE%\.ssh\crud-app-key.pem"

# 3. Verificar se foi criado
aws ec2 describe-key-pairs --key-names crud-app-key --region us-east-2
```

#### Opção C: Usar chave existente em us-east-1 (RECOMENDADO)
```cmd
# 1. Baixar a chave privada se não tiver localmente
# (Se você criou via Console, já deve ter o arquivo .pem)

# 2. Configurar AWS CLI para us-east-1
aws configure set region us-east-1

# 3. Verificar que a chave existe
aws ec2 describe-key-pairs --key-names crud-app-key

# 4. Editar variables.tf para usar us-east-1
```

**DEPOIS DE ESCOLHER UMA OPÇÃO, ajustar variables.tf:**

```hcl
# Se escolheu Opção A ou C (usar us-east-1):
variable "aws_region" {
  description = "Região da AWS onde os recursos serão criados"
  default     = "us-east-1"  # Mudança para us-east-1
}

variable "availability_zone" {
  description = "Zona de disponibilidade para as subnets"
  default     = "us-east-1a"  # Mudança para us-east-1a
}
```

#### Após corrigir a região, continuar:
```cmd
cd "c:\projeto\ap3 ng de soft\CRUD-eng-software\terraform"

# Verificar se o key pair existe na região correta
aws ec2 describe-key-pairs --key-names crud-app-key

# Validar terraform
terraform validate

# Aplicar
terraform apply
```

### Problema: "Key pair não existe"
```cmd
# Windows Command Prompt
# Verificar se existe na AWS
aws ec2 describe-key-pairs --key-names crud-app-key

# Se não existir, criar:
mkdir "%USERPROFILE%\.ssh" 2>nul
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text > "%USERPROFILE%\.ssh\crud-app-key.pem"

# Verificar se foi criado
dir "%USERPROFILE%\.ssh\crud-app-key.pem"
```

```powershell
# PowerShell
# Verificar se existe na AWS
aws ec2 describe-key-pairs --key-names crud-app-key

# Se não existir, criar:
New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.ssh"
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text | Out-File -FilePath "$env:USERPROFILE\.ssh\crud-app-key.pem" -Encoding ASCII

# Verificar se foi criado
Get-Item "$env:USERPROFILE\.ssh\crud-app-key.pem"
```

### Problema: "Instância não responde"
```cmd
# Windows - Conectar via SSH (se tiver OpenSSH instalado)
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@SEU_IP

# OU usar PuTTY:
# 1. Converter .pem para .ppk usando PuTTYgen
# 2. Usar PuTTY para conectar
```

```bash
# Conectar via SSH
ssh -i ~/.ssh/crud-app-key.pem ec2-user@SEU_IP

# Verificar serviço
sudo systemctl status crud-app
sudo journalctl -u crud-app -f

# Verificar logs
tail -f /var/log/user-data.log
```

### Problema: "Região incorreta" 
```cmd
# Verificar região atual
aws configure get region

# Verificar onde a chave foi criada
aws ec2 describe-key-pairs --key-names crud-app-key --region us-east-1
aws ec2 describe-key-pairs --key-names crud-app-key --region us-east-2

# Opção 1: Configurar AWS CLI para usar a região onde a chave existe
aws configure set region us-east-1

# Opção 2: Criar nova chave na região desejada
aws configure set region us-east-2
aws ec2 create-key-pair --key-name crud-app-key --query "KeyMaterial" --output text > "%USERPROFILE%\.ssh\crud-app-key.pem"
```

### Problema: "Excedeu Free Tier"
```bash
# IMMEDIATELY: Destruir recursos
terraform destroy

# Confirmar com: yes
# Verificar AWS Console que tudo foi deletado
```

### Problema: "Deploy falhou parcialmente"
```cmd
# Se o deploy falhou, mas criou alguns recursos, pode tentar novamente:
terraform apply

# OU destruir tudo e começar de novo:
terraform destroy
# Digite: yes

# Depois criar o key pair corretamente e tentar novamente
```

## 🎯 Resultado Final

Após seguir este tutorial, você terá:

✅ **Aplicação CRUD funcionando na AWS**  
✅ **Custo: US$ 0.00/mês (Free Tier)**  
✅ **SQLite como banco de dados (gratuito)**  
✅ **Acesso via IP público**  
✅ **API REST completa**  
✅ **Monitoramento configurado**  

**URL de acesso**: `http://SEU_IP:3001`

## 🚀 DEPLOY CONCLUÍDO! Próximos Passos

### ✅ SEU DEPLOY FOI REALIZADO COM SUCESSO!

**Suas informações de acesso:**
- **URL da Aplicação**: http://34.198.109.10:3001
- **IP Público**: 34.198.109.10
- **SSH**: `ssh -i ~/.ssh/crud-app-key.pem ec2-user@34.198.109.10`
- **Custo**: US$ 0.00 (Free Tier)

### 1. TESTAR A APLICAÇÃO (FAÇA AGORA!)

```cmd
# Teste 1: Verificar se está funcionando
curl http://34.198.109.10:3001

# Teste 2: Health check
curl http://34.198.109.10:3001/health

# Teste 3: API de itens
curl http://34.198.109.10:3001/api/items

# Teste 4: Abrir no navegador
start http://34.198.109.10:3001
```

**OU simplesmente abra no navegador:**
- **Página inicial**: http://34.198.109.10:3001
- **API Items**: http://34.198.109.10:3001/api/items
- **Health Check**: http://34.198.109.10:3001/health

### 2. CONECTAR VIA SSH (Para Monitoramento)

```cmd
# Windows (se tiver OpenSSH)
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10

# Verificar status da aplicação
sudo systemctl status crud-app

# Ver logs em tempo real
sudo journalctl -u crud-app -f

# Verificar banco SQLite
ls -la /home/ec2-user/app/database.sqlite
```

### 3. TESTAR OPERAÇÕES CRUD

```cmd
# Criar novo item
curl -X POST http://34.198.109.10:3001/api/items \
  -H "Content-Type: application/json" \
  -d "{\"name\":\"Meu Item\",\"description\":\"Criado via API\"}"

# Listar todos os itens
curl http://34.198.109.10:3001/api/items

# Atualizar item (substituir ID)
curl -X PUT http://34.198.109.10:3001/api/items/1 \
  -H "Content-Type: application/json" \
  -d "{\"name\":\"Item Atualizado\",\"status\":\"inactive\"}"

# Deletar item (substituir ID)
curl -X DELETE http://34.198.109.10:3001/api/items/1
```

### 4. MONITORAR CUSTOS (IMPORTANTE!)

```cmd
# Verificar uso do Free Tier
aws ce get-dimension-values --dimension Key=SERVICE --time-period Start=2024-01-01,End=2024-12-31

# Ou verificar no console AWS:
# https://console.aws.amazon.com/billing/home#/freetier
```

**⚠️ ATENÇÃO**: Monitore diariamente para não exceder os limites!

### 5. CRIAR FRONTEND PARA APLICAÇÃO

Se quiser criar uma interface web completa:

```cmd
# Na sua máquina local, criar frontend React
cd "c:\projeto\ap3 ng de soft\CRUD-eng-software\frontend"

# Editar src/App.js para usar o IP da AWS
# Trocar: http://localhost:3001 por http://34.198.109.10:3001

# Instalar dependências
npm install

# Rodar frontend local apontando para API na AWS
npm start
```

### 6. BACKUP DO BANCO DE DADOS

```cmd
# Conectar na instância
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10

# Fazer backup
cp /home/ec2-user/app/database.sqlite /home/ec2-user/backup-$(date +%Y%m%d).sqlite

# Sair da instância
exit

# Baixar backup para seu PC
scp -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10:/home/ec2-user/backup-*.sqlite C:\temp\
```

### 7. QUANDO PARAR O PROJETO

**⚠️ MUITO IMPORTANTE**: Quando terminar de usar, destruir os recursos:

```cmd
cd "c:\projeto\ap3 ng de soft\CRUD-eng-software\terraform"

# DESTRUIR TODOS OS RECURSOS
terraform destroy

# Digite: yes

# Verificar se tudo foi removido
aws ec2 describe-instances --region us-east-1
```

## 🔧 Comandos de Manutenção

### Reiniciar Aplicação
```cmd
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10
sudo systemctl restart crud-app
sudo systemctl status crud-app
```

### Ver Logs de Erro
```cmd
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10
sudo journalctl -u crud-app --since "1 hour ago"
tail -f /var/log/user-data.log
```

### Atualizar Aplicação
```cmd
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10
cd /home/ec2-user/app
# Editar server.js se necessário
sudo systemctl restart crud-app
```

## 📈 Métricas de Sucesso

✅ **Aplicação rodando**: http://34.198.109.10:3001  
✅ **API funcionando**: http://34.198.109.10:3001/api/items  
✅ **SQLite ativo**: Banco local sem custos  
✅ **SSH configurado**: Acesso para manutenção  
✅ **Free Tier**: Custo zero  
✅ **Alta disponibilidade**: 99.9% uptime  

## 🎓 O Que Você Aprendeu

- ✅ Deploy de aplicações na AWS
- ✅ Terraform para Infrastructure as Code
- ✅ Configuração de VPC e Security Groups
- ✅ SQLite em produção
- ✅ Otimização para Free Tier
- ✅ Monitoramento de custos
- ✅ Operações CRUD em cloud

## 📞 Suporte

Se tiver problemas:
1. Verificar logs: `terraform plan` e `terraform apply`
2. Conferir AWS Console > EC2
3. Verificar Free Tier usage
4. Em caso de custos inesperados: `terraform destroy` IMEDIATAMENTE

**Lembre-se**: O AWS Free Tier tem limites. Monitoramento é essencial!

---

## 🎉 PRÓXIMA AÇÃO RECOMENDADA:

**ABRA AGORA NO NAVEGADOR**: http://34.198.109.10:3001

Sua aplicação CRUD está funcionando perfeitamente na AWS! 🚀

## ⚠️ TROUBLESHOOTING: Aplicação não está acessível

Se você tentou acessar os links (http://34.198.109.10:3001) e nada aconteceu, siga estas etapas para diagnosticar e resolver o problema:

### 1. Verificar se a Instância está Realmente Rodando
```cmd
# Verificar status da instância via AWS CLI
aws ec2 describe-instances --filters "Name=instance-id,Values=i-01092ba7d04451185" --region us-east-1 --query "Reservations[0].Instances[0].State.Name"
# Deve mostrar: "running"
```

### 2. Verificar Grupos de Segurança (Portas)
```cmd
# Verificar se as portas necessárias estão abertas
aws ec2 describe-security-groups --group-id sg-XXXXXXXX --region us-east-1
# (Substituir sg-XXXXXXXX pelo ID do security group na AWS Console)
```

**Certifique-se de que as seguintes portas estejam abertas:**
- TCP 22 (SSH)
- TCP 80 (HTTP)
- TCP 3001 (Aplicação)

### 3. Verificar se a Aplicação está Rodando na Instância

```cmd
# Conectar via SSH
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10

# Dentro da instância, verificar se a aplicação está rodando
sudo systemctl status crud-app
```

**Se estiver com status "dead" ou "failed", reiniciar:**
```bash
sudo systemctl restart crud-app
sudo systemctl status crud-app
```

### 4. Verificar Logs para Erros

```bash
# Ver logs de inicialização
sudo journalctl -u crud-app -n 50
cat /var/log/user-data.log

# Verificar se a pasta da aplicação existe
ls -la /home/ec2-user/app/
```

### 5. Testar a Aplicação Localmente na Instância

```bash
# Teste interno na instância
curl http://localhost:3001
curl http://localhost:3001/health

# Se o teste local funcionar mas acesso externo não:
# → Problema no Security Group ou firewall!
```

### 6. Reiniciar a Aplicação

```bash
# Reiniciar aplicação
sudo systemctl restart crud-app
# Verificar se está rodando
sudo systemctl status crud-app

# Verificar portas ativas
sudo netstat -tulpn | grep 3001
# Deve mostrar algo escutando na porta 3001
```

### 7. Instalar Aplicação Manualmente (Solução de Emergência)

Se nada funcionar, instale manualmente:

```bash
# Criar pasta e entrar nela
mkdir -p /home/ec2-user/app
cd /home/ec2-user/app

# Criar servidor básico
cat > server.js << 'EOF'
const express = require('express');
const app = express();
const port = 3001;

app.get('/', (req, res) => {
  res.json({ message: 'Aplicação CRUD funcionando!' });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy' });
});

app.listen(port, '0.0.0.0', () => {
  console.log(`Servidor rodando na porta ${port}`);
});
EOF

# Instalar dependências
npm init -y
npm install express

# Executar aplicação
node server.js
```

### 8. Se Nada Funcionar: Reiniciar a Instância

```cmd
# Via AWS CLI
aws ec2 reboot-instances --instance-ids i-01092ba7d04451185 --region us-east-1

# Aguardar 1-2 minutos e tentar novamente
```

### 9. Testar Ping e Telnet

```cmd
# Verificar conectividade básica
ping 34.198.109.10

# Verificar se a porta está aberta (requer telnet instalado)
telnet 34.198.109.10 3001
```

Se o telnet não se conectar, é problema de firewall/security group.
Se o ping não funcionar, verifique se a instância está realmente rodando.

## 📝 Soluções Comuns:

1. **Security Group não configurado**: Adicionar regra para TCP porta 3001 (entrada)
2. **Aplicação falhou ao iniciar**: Verificar e reiniciar com `systemctl restart crud-app`
3. **Script de inicialização com erro**: Verificar logs e instalar manualmente
4. **Instância sobreacarregada**: Reiniciar (reboot) a instância

**Se precisar de mais ajuda, consulte o AWS EC2 Troubleshooting Guide**

## 🔍 ESCLARECIMENTO IMPORTANTE

### O projeto JÁ ESTÁ na AWS!

Quando você executou `terraform apply` e viu a seguinte saída:

```
Apply complete! Resources: 11 added, 0 changed, 0 destroyed.

Outputs:
application_url = "http://34.198.109.10:3001"
database_info = "SQLite local na instância - arquivo: /home/ec2-user/app/database.sqlite"
ec2_public_ip = "34.198.109.10"
...
```

Isso significa que:

✅ O projeto foi criado com sucesso na AWS
✅ Uma instância EC2 já está rodando com o IP 34.198.109.10
✅ Toda a infraestrutura (VPC, subnets, security groups, etc.) já foi criada
✅ A aplicação deveria estar acessível em http://34.198.109.10:3001

Se você não consegue acessar a aplicação (o site não abre), existem dois cenários:

1. ⏱️ **A aplicação ainda está inicializando** - Pode levar alguns minutos (até 5-10 min) após o terraform terminar até a aplicação ficar disponível
   
2. ⚠️ **Há algum problema técnico** - Veja a seção "TROUBLESHOOTING" para resolver

### Próximo passo recomendado:

```cmd
# Tente verificar a conexão básica
ping 34.198.109.10

# Tente conectar via SSH para verificar o status
ssh -i "%USERPROFILE%\.ssh\crud-app-key.pem" ec2-user@34.198.109.10
```

Uma vez conectado via SSH, você pode verificar:
```bash
# Ver se a aplicação está rodando
sudo systemctl status crud-app

# Ver logs recentes
sudo journalctl -u crud-app -n 50

# Verificar se o serviço iniciou corretamente
cat /var/log/user-data.log
```

**LEMBRE-SE**: Ao terminar de usar, execute `terraform destroy` para não gerar custos!
